from rfpl.natural import Natural
from rfpl.fast_functions import fast_function

basics = {}

@fast_function(basics, narg=2)
def Add(_blist, args):
    return args[1] + args[0]

@fast_function(basics, narg=2)
def Sub(_blist, args):
    return args[1] - args[0]

@fast_function(basics, narg=2)
def Mul(_blist, args):
    return args[1] * args[0]

@fast_function(basics, narg=2)
def Pow(_blist, args):
    return args[1] ** args[0]

@fast_function(basics, narg=2)
def Get(_blist, args):
    if args[1].is_zero():
        return Natural(0)
    return args[1].get_entry(args[0])

@fast_function(basics, narg=3)
def Set(_blist, args):
    if args[2].is_zero():
        return Natural(0)
    return args[2].set_entry(args[0], args[1])

@fast_function(basics, narg=1)
def Int(_blist, args):
    result = args[0].copy()
    result.simplify()
    return result

@fast_function(basics, narg=1)
def List(_blist, args):
    result = args[0].copy()
    if result.is_defined() and not result.is_zero():
        result.factor()
    return result

@fast_function(basics, narg=2)
def Mod(_blist, args):
    return args[0] % args[1]