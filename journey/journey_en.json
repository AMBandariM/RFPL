[
    {
        "type": "userguide",
        "prerequisites": [],
        "jobs": [
            {
                "type": "typewriter",
                "content": "Hello there! Welcome to The RFPL Journey! We are going to learn about Recursive Functions and this Programming Language!\nMay I ask Your Name?",
                "highlights": ["The RFPL Journey", "Your Name", "Recursive Functions", "Programming Language"]
            },
            {
                "type": "getusername"
            },
            {
                "type": "typewriter",
                "content": "Great! Let's start our journey! RFPL operates with (non-negative) integers and functions applied to them! Actually, we are interested in constructing (complex) functions using our fundamental (ingredient) functions!",
                "highlights": ["RFPL", "fundamental"]
            },
            {
                "type": "typewriter",
                "content": "But what are these fundamental functions? Perhaps the simplest functions are Constant functions. They ignore inputs and always return a fixed number! In RFPL, we show these functions by `#` (sharp), for example `#3` is a function that returns 3, regardless of the input!",
                "highlights": ["`#3`", " 3", "RFPL", "Constant", "`#`"]
            },
            {
                "type": "typewriter",
                "content": "The next simplest functions are Identity functions. They simply return one of their inputs without modification! We represent these functions using `!` (bang). For example, `!0` returns its first input (using 0-based indexing). See these examples:",
                "highlights": ["RFPL", "Identity", "`!`", "`!0`", "first"]
            },
            {
                "type": "print",
                "content": "#2(1, 8) = 2, #7() = 7, !0(1, 3) = 1, !2(3, 4, 5) = 5"
            },
            {
                "type": "typewriter",
                "content": "But what can we construct using only Constant and Identity functions? Any composition(?) of these functions would still be ether Constant or Identity. :(\nSo let me intoduce the function `S` (S stands for Successor). This function returns next number after its (first) input:",
                "highlights": ["composition", "`S`", "Successor"]
            },
            {
                "type": "print",
                "content": "S(0) = 1, S(S(2)) = 4, S(1, 13) = 2, S(9, 2, 4) = 10"
            },
            {
                "type": "typewriter",
                "content": "Now, go and `play-around` a little bit and make yourself comfortable.",
                "highlights": ["`play-around`"]
            },
            {
                "type": "sidenote",
                "title": "fundamentals",
                "content": "`#n` is Constant n: `#2(1, 8) = 2, #7() = 7`\n`!n` is Identity, returning (n+1)-th input: `!0(1, 3) = 1, !2(3, 4, 5) = 5`\n`S` is Successor: `S(0) = 1, S(S(2)) = 4, S(1, 13) = 2, S(9, 2, 4) = 10`"
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "play-around",
        "prerequisites": [0],
        "target": "",
        "banner": "Test what you've learned! For example try writing `S(!1(S(2), S(3)))` and check if the result matches your expectation.\nType `done` when you finished playing. Enjoy!",
        "tests": [],
        "limits": ["define", "load", "bracket", "builtinCn", "builtinPr", "builtinMn", "naturallist"],
        "have": [],
        "hints": []
    },
    {
        "type": "userguide",
        "prerequisites": [1],
        "jobs": [
            {
                "type": "typewriter",
                "content": "Yes, that playing-around was cool, but we didn't introduce any new functions-just new values! We said we are interested in constructing (complex) fucntions! So let's define new functions using `=` (big surprise!). For example, `a = S` means `a` is a function that behaves exactly like `S`.",
                "highlights": ["new functions", "exactly", "`=`"]
            },
            {
                "type": "typewriter",
                "content": "Previously, we tried `S(S(2))` which was 2+2. How can we define a new function x+2?\nAt first, 'b = S(S)' might seem reasonable, but RFPL doesn't think so. `a(x) = S(x)` makes sense but `b(x) = S(S)(x)`? It's weird. Plus, we don't like parentheses when we're defining functions-they're for calling them.",
                "highlights": ["RFPL", "parentheses"]
            },
            {
                "type": "typewriter",
                "content": "So, what should we do? It's time to introduce another fundamental function: `Cn` (Cn stands for Composition). This function takes other functions as input and produces a new function! Let's see some example:",
                "highlights": ["`Cn`", "Composition", "gets functions"]
            },
            {
                "type": "print",
                "content": "a = Cn[f, g, h] -> a(x, y, z) = f(g(x, y, z), h(x, y, z))\na = Cn[b, !1, !0] -> a(x,y) = b(y,x)\na = Cn[S, S] -> a(x) = x + 2"
            },
            {
                "type": "typewriter",
                "content": "You probably get the idea by now. `Cn` can get any (>= 1) number of functions like `Cn[f,g_0,...,g_k]`. The first function is a little bit special. When we call function `Cn[f,g_0,...,g_k]` with some inputs, those inputs would be given to `g_i` functions and the outputs (of `g_i`s) would be inputs of `f` and the output of `f` is our final output!",
                "highlights": ["special", "inputs", "outputs", "final output"]
            },
            {
                "type": "typewriter",
                "content": "To construct `f = S(!1(S(x), S(y)))` we use:",
                "highlights": []
            },
            {
                "type": "print",
                "content": "f = Cn[S, Cn[!1, Cn[S, !0], Cn[S, !1]]]"
            },
            {
                "type": "typewriter",
                "content": "Let's practice what we learned.",
                "highlights": ["practice"]
            },
            {
                "type": "sidenote",
                "title": "fundamentals",
                "content": "`Cn` is Composition: `a = Cn[f, g, h] -> a(x, y, z) = f(g(x, y, z), h(x, y, z))`"
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "challenge01",
        "prerequisites": [2],
        "target": "z+3",
        "banner": "In this challenge you have to make a function like `f(x, y, z) = z + 3`. You have 2 hints in this challenge, you can get them by typing `hint`. After constructing (defining) the target function, type `done` to finish the challenge. You can type `list` to see all functions you've defined and `end` to exit the challenge.",
        "tests": [
            [0,0,3],
            [1,2,4],
            [10,3,5],
            [12,5,8],
            [0,13,9]
        ],
        "limits": ["load", "bracket", "builtinPr", "builtinMn", "naturallist"],
        "have": [],
        "hints": [
            "You can first make `x+3` and then put `z` in its `x` using a `Cn` Next hint is the full answer. Try not to use it.",
            "Cn[Cn[S, Cn[S, S]], !2]"
        ]
    },
    {
        "type": "userguide",
        "prerequisites": [3],
        "jobs": [
            {
                "type": "typewriter",
                "content": "`Cn` helped us a lot for playing with inputs, outputs, and their arrangement. But, we are still weak. How can we construct a function that depends on two of its inputs? `S`, `!`, and `#` care about at most one of their inputs. Therefore, any composition of them would, practically, care about at most one input. So, we wouldn't be able to construct functions like `x+y`!",
                "highlights": ["arrangement", "depends", "practically", "`x+y`"]
            },
            {
                "type": "typewriter",
                "content": "Now, RFPL gives us a powerful function `Pr` (Pr stands for Primitive Recursion). `Pr` takes two functions and constructs another. `Pr[f, g]` means:",
                "highlights": ["RFPL", "`Pr`", "Primitive Recursion"]
            },
            {
                "type": "print",
                "content": "h = Pr[f, g]\nh gets 2 inputs, f gets 1 input, and g gets 3 inputs\nh(0, y)=f(y), h(x+1, y) = g(h(x, y), x, y)"
            },
            {
                "type": "typewriter",
                "content": "`h = Pr[f, g]` is Recursion with base case `f` and step `g`. In general case:",
                "highlights": ["base case", "step"]
            },
            {
                "type": "print",
                "content": "h(0, y_1, ..., y_k) = f(y_1, ..., y_k),\nh(x+1, y_1, ..., y_k) = g(h(x, y_1, ..., y_k), x, y_1, ..., y_k)"
            },
            {
                "type": "typewriter",
                "content": "Now, we can construct almost every function we want! Let's go for some challenges!",
                "highlights": ["almost"]
            },
            {
                "type": "sidenote",
                "title": "fundamentals",
                "content": "`Pr` is Primitive Recursion:\n          h = Pr[f, g]:  h(0, y_1, ..., y_k) = f(y_1, ..., y_k),\n      h(x+1, y_1, ..., y_k) = g(h(x, y_1, ..., y_k), x, y_1, ..., y_k)"
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "challenge02",
        "prerequisites": [4],
        "target": "x+y",
        "banner": "Construct `add(x, y) = x + y` and type `done`. You have 1 hint in this challenge.\nKeys: `hint`, `list`, `done`, and `end`.",
        "tests": [
            [0,0],
            [1,2],
            [3,5],
            [5,8],
            [13,9],
            [21,27],
            [29,81]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": [],
        "hints": ["What is `add(0, y)`? If you have `x+y` how can you compute `(x+1)+y`?"]
    },
    {
        "type": "challenge",
        "starter": "challenge03",
        "prerequisites": [4],
        "target": "y^x",
        "banner": "`pow(x, y) = y ^ x`; note that it's not `x ^ y`! You have 1 hint. You can use `Add` without having to define it.\nKeys: `hint`, `list`, `done`, and `end`.",
        "tests": [
            [0,2],
            [2,3],
            [3,4],
            [3,10],
            [12,0]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": ["Add"],
        "hints": ["First, construct `mul`."]
    },
    {
        "type": "challenge",
        "starter": "challenge04",
        "prerequisites": [5,6],
        "target": "y-x",
        "banner": "In this challenge we are going to construct subtraction function. But wait! We don't have negative numbers! That's OK; we just consider negative results as `0`, for example `2 - 5 = 0`. `sub(x, y) = max(y - x, 0)`, note that it's not `x - y`! You have 2 hints.\nKeys: `hint`, `list`, `done`, and `end`.",
        "tests": [
            [1,3],
            [5,1],
            [0,0],
            [3,10],
            [7,0]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": [],
        "hints": [
            "First, construct `sub1(x) = max(x - 1, 0)`",
            "Note that f = Pr[g, h] means f(x+1) = h(?, x)!"
        ]
    },
    {
        "type": "challenge",
        "starter": "challenge05",
        "prerequisites": [7],
        "target": "|x-y|",
        "banner": "Compute the absolute difference between `x` and `y`, `abs(2, 7) = abs(7, 2) = 5`. You can use `Add` and `Sub` without defining them.\nKeys: `list`, `done`, and `end`.",
        "tests": [
            [2,7],
            [7,2],
            [0,0],
            [9,1],
            [7,15]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": ["Add", "Sub"],
        "hints": []
    },
    {
        "type": "userguide",
        "prerequisites": [8],
        "jobs": [
            {
                "type": "typewriter",
                "content": "Cool! Now we have `Add`, `Mul`, `Pow`, `Sub`, and `Abs`! Boolean functions like `And`, `Or`, and `Not` are fairly easy to construct, so we assume you can make them whenever you want.",
                "highlights": ["`Add`", "`Mul`", "`Pow`", "`Sub`", "`Abs`", "`And`", "`Or`", "`Not`"]
            },
            {
                "type": "typewriter",
                "content": "Let's go for a bigger fish!",
                "highlights": ["bigger fish"]
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "challenge06",
        "prerequisites": [9],
        "target": "x/y",
        "banner": "The task is pretty straightforward, implement integer division: `5 / 2 = 2, 101 / 7 = 14`. You can assume `y > 0` and return whatever you want in case of `y = 0`. There are 3 hints and you can use `Add`, `Mul`, and `Sub` without defining them.\nKeys: `hint`, `list`, `done`, and `end`.",
        "tests": [
            [5,2],
            [101,7],
            [0,2],
            [70,3],
            [15,7]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": ["Add", "Mul", "Sub"],
        "hints": [
            "This challenge is a little bit hard. Spend more time on it.",
            "`k = x / y` is the biggest integer such that `k * y <= x`. Or, it is kinda number of such integers!",
            "Make a function `I(k, x, y) = 1 if k * y <= x else 0` and add these `I`s for `k = 1, 2, ..., ?`"
        ]
    },
    {
        "type": "userguide",
        "prerequisites": [10],
        "jobs": [
            {
                "type": "typewriter",
                "content": "Great Job! Now you can construct `Log` function using similar trick. We will find easier ways to build these functions when we construct functions `Mod` and `Divs`",
                "highlights": ["`Log`", "`Mod`", "`Divs`"]
            },
            {
                "type": "typewriter",
                "content": "Let's make some useful functions in Number Theory.",
                "highlights": ["Number Theory"]
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "challenge07",
        "prerequisites": [11],
        "target": "x%y",
        "banner": "Implement `x%y`, you can assume `y>0` and return anything when `y=0`. You can use `Add`, `Mul`, and `Sub` without defining them.\nKeys: `list`, `done`, and `end`.",
        "tests": [
            [4,11],
            [101,7],
            [2,1],
            [7,2],
            [70,15]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": ["Add", "Mul", "Sub"],
        "hints": []
    },
    {
        "type": "challenge",
        "starter": "challenge08",
        "prerequisites": [11],
        "target": "GCD",
        "banner": "Compute Greatest Common Divisor of `x` and `y`, you can assume `x + y > 0`. You have 1 hint and you can use `Add`, `Mul`, `Sub`, and `Mod` without defining them.\nKeys: `hint`, `list`, `done`, and `end`.",
        "tests": [
            [12,7],
            [1,33],
            [21,0],
            [0,21],
            [12,4],
            [7,35]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": ["Add", "Mul", "Sub", "Mod"],
        "hints": [
            "That trick in making `div` is not useful here, but you can compute `max int s.t. something` in another way, too."
        ]
    },
    {
        "type": "userguide",
        "prerequisites": [12,13],
        "jobs": [
            {
                "type": "typewriter",
                "content": "That trick used in `GCD` can be helpful for creating other functions. You can compute `vp(x)`, which is maximum `k` such that `p^k` divides `x`.",
                "highlights": ["trick", "`vp(x)`"]
            },
            {
                "type": "typewriter",
                "content": "Let's go for an other Idea!",
                "highlights": []
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "challenge08",
        "prerequisites": [14],
        "target": "fib",
        "banner": "The Fibonacci sequence is 1, 1, 2, 3, 5, ... where `f(n+1) = f(n) + f(n-1)`. You have 3 hints and you can use `Add`, `Mul`, `Sub`, and `Mod` without defining them.\nKeys: `hint`, `list`, `done`, and `end`.",
        "tests": [
            [0],
            [1],
            [2],
            [3],
            [4]
        ],
        "limits": ["load", "bracket", "builtinMn", "naturallist"],
        "have": ["Add", "Mul", "Sub", "Mod"],
        "hints": [
            "`fib` can't compute its result by knowing only the previous member in sequence. But you can compute `fib(n+2), fib(n+1)` knowing `fib(n+1), fib(n)`. How can we return a `Tuple` instead of an `Integer`?",
            "We have to pack our outputs and unpack inputs that we know are packed!",
            "Use `2^x * 3^y` for packing `x,y`, and use `v2` and `v3` for unpacking!"
        ]
    },
    {
        "type": "userguide",
        "prerequisites": [15],
        "jobs": [
            {
                "type": "typewriter",
                "content": "You See? We were working just with numbers, but it seems tuples can be seen as numbers too! In fact, any list can be seen as a number just like `<a1, ..., an> -> 2^a1...pn^an`. So RFPL provides a syntax for us to represent lists (which are numbers!). So you can write `6` or you write it like `<1,1>` or `9 = <0, <1>>`.",
                "highlights": ["tuples", "as numbers", "list", "RFPL"]
            },
            {
                "type": "sidenote",
                "title": "syntax",
                "content": "You can represent arrays of numbers (and it will be a number), like `<1,2,3>` which will be `2x9x125`."
            }
        ]
    },
    {
        "type": "userguide",
        "prerequisites": [16],
        "jobs": [
            {
                "type": "typewriter",
                "content": "What a great language, isn't it? It seems you can construct everything with these beautiful functions! But wait. All these functions will return a result after finite steps.\nWhat? We found something better than The Turing Machine?",
                "highlights": ["finite", "The Turing Machine"]
            },
            {
                "type": "typewriter",
                "content": "Ummmm, No. You actually can NOT construct all functions with these fundamental functions you know. For example, consider Ackermann function, you can't construct it. What is the problem? The problem is that we don't have a `loop for ever`.",
                "highlights": ["NOT", "Ackermann", "`loop for ever`"]
            },
            {
                "type": "typewriter",
                "content": "So RFPL just provides another fundamental function `Mn` (Mn stands for Minimization). If `f(x, y_1, ..., y_k)` be a function and `g = Mn[f]`, then `g(y_1, ..., y_n)` will be the smallest `x` such that `f(x, y_1, ..., y_n) = 0`. And if there is no such `x`? Yes, loop for ever.",
                "highlights": ["RFPL", "`Mn`", "Minimization", "smallest", "loop for ever"]
            },
            {
                "type": "sidenote",
                "title": "fundamentals",
                "content": "`Mn`: If `f(x, y_1, ..., y_k)`, `g = Mn[f]`, then `g(y_1, ..., y_n)` will be the smallest `x` such that `f(x, y_1, ..., y_n) = 0`, and if there is no such `x`, it loops for ever."
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "play-around",
        "prerequisites": [17],
        "target": "",
        "banner": "Try things you've learned. For example test `Add(<1, 2>, <<1>, 0, 1>)` and check why the result is correct. Or, define `log = Mn[Sub[!1, Pow(!0, #2)]]` and test it.\nWrite down `done` when you are.",
        "tests": [],
        "limits": ["load", "bracket"],
        "have": ["Add", "Sub", "Pow"],
        "hints": []
    },
    {
        "type": "userguide",
        "prerequisites": [18],
        "jobs": [
            {
                "type": "typewriter",
                "content": "Huh, it was pretty much everything, but let me show you one more thing before we finish. `Cn`, `Pr`, and `Mn` were functions! But they had brackets in front of them! Why? Just because they were here first?",
                "highlights": ["`Cn`", "`Pr`", "`Mn`"]
            },
            {
                "type": "typewriter",
                "content": "No! It's not like that in here! RFPL is a fair and generous language! These functions used brackets because they get functions as inputs. You can write your functions which get functions as input! You can use `@n` to refer the n-th function in your input functions, just like `!n` for n-th input!",
                "highlights": ["RFPL", "fair", "generous", "get functions", "`@n`"]
            },
            {
                "type": "typewriter",
                "content": "For example consider `swap = Cn[@0, !1, !0]`, if `f` is a two-input function, `swap[f]` will be `f` with swapped inputs!",
                "highlights": ["@0"]
            },
            {
                "type": "typewriter",
                "content": "There is another useful tool for defining such functions, it is `!n..`, it means 'Consider all inputs !n, !n+1, ...'. For example, `swap = Cn[@0, !1, !0, !2..]` works like previous `swap` and it provides other inputs (if any). Now the `f` in `swap[f]` doesn't have to get exactly 2 inputs, it can get more.",
                "highlights": ["!n..", "other"]
            },
            {
                "type": "sidenote",
                "title": "syntax",
                "content": "`Cn[f, g, h, !2..]` means `Cn[f, g, h, !2, !3, !4, ...].`"
            }
        ]
    },
    {
        "type": "challenge",
        "starter": "play-around",
        "prerequisites": [19],
        "target": "",
        "banner": "Define `for = Pr[@0, Cn[@1, !0, !2..]]` and construct `add = for[!0, S]`, `mul = for[#0, add]`, `pow = for[#1, mul]`. Test these functions. Play around and write down `done` when you are.",
        "tests": [],
        "limits": ["load"],
        "have": [],
        "hints": []
    },
    {
        "type": "userguide",
        "prerequisites": [20],
        "jobs": [
            {
                "type": "typewriter",
                "content": "Thank you for making it this far on this journey! You can use our RFPL python library to run a commandline and run your own RFPL programs.\nEnjoy!",
                "highlights": ["Journey", "RFPL", "Enjoy"]
            }
        ]
    },
    {
        "type": "writer-contact",
        "fullname": "AmirMohammad Bandari Masoole",
        "email": "ambandarim@gmail.com"
    }
]